# Global
import unittest
import numpy as np
import jax.numpy as jnp

# Local
import utils as tu
from fastPTA import utils as ut
from fastPTA import pulsar_noises as pn


class TestPulsarNoises(unittest.TestCase):

    def test_get_WN(self):
        """
        Test white noise computation
        """
        # Test parameters
        WN_parameters = jnp.array([1.0, 2.0, 3.0])  # microseconds
        dt = jnp.array([86400.0, 172800.0, 259200.0])  # seconds (1, 2, 3 days)

        # Expected result (manually computed)
        expected = 1e-100 + 1e-12 * 2 * WN_parameters**2 * dt

        # Actual result
        result = pn.get_WN(WN_parameters, dt)

        # Check
        self.assertTrue(jnp.allclose(result, expected))

    def test_get_pl_colored_noise(self):
        """
        Test power-law colored noise computation
        """
        # Test parameters
        frequencies = jnp.array([1e-8, 2e-8, 3e-8])  # Hz
        log10_ampl = jnp.array([-15.0, -14.5, -14.0])
        gamma = jnp.array([13 / 3, 4.0, 5.0])

        # Expected result (manually computed)
        amplitude_prefactor = (
            (10**log10_ampl) ** 2 / 12.0 / jnp.pi**2 / ut.f_yr**3
        )
        frequency_dependent_term = jnp.array(
            [
                (ut.f_yr / frequencies) ** gamma[0],
                (ut.f_yr / frequencies) ** gamma[1],
                (ut.f_yr / frequencies) ** gamma[2],
            ]
        )
        expected = amplitude_prefactor[:, np.newaxis] * frequency_dependent_term

        # Actual result
        result = pn.get_pl_colored_noise(frequencies, log10_ampl, gamma)

        # Check
        self.assertTrue(jnp.allclose(result, expected))

    def test_get_noise_omega(self):
        """
        Test conversion of noise to Omega units
        """
        # Test parameters
        frequencies = jnp.array([1e-8, 2e-8, 3e-8])  # Hz
        noise = jnp.array([1e-30, 2e-30, 3e-30])

        # Expected result (manually computed)
        convert_to_strain_factor = 12 * jnp.pi**2 * frequencies**2
        convert_to_omega_factor = (
            ut.strain_to_Omega(frequencies) * convert_to_strain_factor
        )
        expected = np.zeros((3, 3, 3))
        for i in range(3):
            for j in range(3):
                if i == j:
                    expected[:, i, j] = convert_to_omega_factor * noise[j]

        # Actual result
        result = pn.get_noise_omega(frequencies, noise)

        # Check
        self.assertTrue(jnp.allclose(result, expected))

    def test_get_pulsar_noises(self):
        """
        Test computation of all pulsar noise components
        """
        # Test parameters
        frequencies = np.array([1e-8, 2e-8])  # Hz
        num_pulsars = 3
        WN_par = np.array([1.0, 2.0, 3.0])  # microseconds
        log10_A_red = np.array([-15.0, -14.5, -14.0])
        gamma_red = np.array([13 / 3, 4.0, 5.0])
        log10_A_dm = np.array([-14.0, -13.5, -13.0])
        gamma_dm = np.array([11 / 3, 3.5, 4.5])
        log10_A_sv = np.array([-16.0, -15.5, -15.0])
        gamma_sv = np.array([17 / 3, 6.0, 6.5])
        dt = np.array([86400.0, 172800.0, 259200.0])  # seconds (1, 2, 3 days)

        # Expected components
        WN = np.array(pn.get_WN(WN_par, dt))  # Convert JAX array to NumPy
        RN = np.array(
            pn.get_pl_colored_noise(frequencies, log10_A_red, gamma_red)
        )
        DM = np.array(
            pn.get_pl_colored_noise(frequencies, log10_A_dm, gamma_dm)
        )
        SV = np.array(
            pn.get_pl_colored_noise(frequencies, log10_A_sv, gamma_sv)
        )

        # Expected result
        expected = np.zeros((3, 2))
        for i in range(num_pulsars):
            expected[i, :] = WN[i] + RN[i, :] + DM[i, :] + SV[i, :]

        # Actual result
        result = pn.get_pulsar_noises(
            frequencies,
            WN_par,
            log10_A_red,
            gamma_red,
            log10_A_dm,
            gamma_dm,
            log10_A_sv,
            gamma_sv,
            dt,
        )

        # Check
        self.assertTrue(np.allclose(result, expected))

    def test_mock_data(self):
        """
        Test with the mock data generated by the
        generate_mock_pulsar_noises.py script
        """
        # Load mock data
        mock_data = np.load(tu.mock_pulsar_noises)

        # Extract inputs and expected outputs
        frequencies = mock_data["frequencies"]
        WN_par = mock_data["WN_par"]
        log10_A_red = mock_data["log10_A_red"]
        gamma_red = mock_data["gamma_red"]
        log10_A_dm = mock_data["log10_A_dm"]
        gamma_dm = mock_data["gamma_dm"]
        log10_A_sv = mock_data["log10_A_sv"]
        gamma_sv = mock_data["gamma_sv"]
        dt = mock_data["dt"]
        expected_noises = mock_data["pulsar_noises"]
        expected_omega = mock_data["noise_omega"]

        # Compute the noises
        noises = pn.get_pulsar_noises(
            frequencies,
            WN_par,
            log10_A_red,
            gamma_red,
            log10_A_dm,
            gamma_dm,
            log10_A_sv,
            gamma_sv,
            dt,
        )

        # Compute the omega
        omega = pn.get_noise_omega(frequencies, noises)

        # Check
        self.assertTrue(jnp.allclose(noises, expected_noises))
        self.assertTrue(jnp.allclose(omega, expected_omega))


if __name__ == "__main__":
    unittest.main()
